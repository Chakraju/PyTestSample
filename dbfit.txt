Design Document: Custom Pytest-Based Database Release Testing Framework
________________________________________
1. Overview
This document describes the design of a Python-based automated testing framework intended to replace DBFit for validating PostgreSQL database schema changes across environments using Pytest. The framework supports forward and rollback SQL verification and generates HTML test reports.
________________________________________
2. Goals
•	Replace DBFit with a maintainable, modular Python-based solution.
•	Support validation of table definitions, columns, constraints, triggers, views, functions, and privileges.
•	Enable rollback verification after applying forward SQL.
•	Generate and run test cases from custom SQL queries.
•	Produce human-readable HTML test reports.
________________________________________
3. Architecture
+--------------------------+
|     main.py             |
| (Orchestrator)          |
+-----------+--------------+
            |
    +-------v--------+
    | generate_tests.py |
    | Generates pytest  |
    | test files        |
    +------------------+
            |
    +-------v---------+
    | execute_tests.py |
    | Runs pytest tests|
    +------------------+

       [Uses Below Modules]
+---------------------+      +--------------------+
| utils/db.py         |<---->| config/envs.yaml   |
| DB connections      |      | Env configs        |
+---------------------+      +--------------------+
| utils/compare.py    |
| Result comparison   |
+---------------------+
| utils/release_runner.py |
| Apply SQL scripts   |
+---------------------+

[Inputs]
 - queries/*.sql          => Schema-checking queries
 - releases/R*/.sql       => Forward & rollback scripts

[Outputs]
 - generated_tests/*.py   => Pytest test cases
 - report_<release>.html  => HTML test reports
________________________________________
4. Folder Structure
dbtest_framework/
├── config/
│   └── envs.yaml              # DB connection configs
├── queries/                   # Custom SQLs for schema validation
├── releases/                  # Forward and rollback SQLs
│   └── R1/
│       ├── forward.sql
│       └── rollback.sql
├── generated_tests/           # Auto-generated test files
├── tests/                     # Optional manual tests
├── utils/
│   ├── db.py                  # Connect and query DBs
│   ├── compare.py             # Compare query outputs
│   └── release_runner.py      # Apply forward/rollback SQL
├── generate_tests.py          # Creates test files from queries
├── execute_tests.py           # Runs pytest and generates reports
├── main.py                    # Combined generation + execution
________________________________________
5. Component Design
5.1 generate_tests.py
•	Input: Release name (e.g., R1)
•	Reads all schema-checking queries
•	Creates a pytest-compatible test file
•	Each test:
o	Applies forward.sql
o	Runs validation queries against sandbox and target env (e.g., dev)
o	Applies rollback.sql
o	Re-validates post-rollback
5.2 execute_tests.py
•	Input: Release name
•	Runs corresponding test file using Pytest
•	Produces an HTML report using pytest-html
5.3 main.py
•	Input: Release name
•	Invokes generate_tests.py followed by execute_tests.py
________________________________________
6. Test Strategy
•	Each query in queries/*.sql will run on:
o	Sandbox (expected schema)
o	Target env (Dev) post-forward and post-rollback
•	Comparisons done using utils/compare.py
•	Failures highlight differences in row counts or values
________________________________________
7. Environment Configuration (envs.yaml)
sandbox:
  host: localhost
  port: 5432
  user: sandbox_user
  password: secret
  dbname: sandbox_db

dev:
  host: dev-db.org.net
  port: 5432
  user: dev_user
  password: secret
  dbname: dev_db
________________________________________
8. Execution Commands
# Step-by-step:
python generate_tests.py R1
python execute_tests.py R1

# Combined:
python main.py R1
________________________________________
9. Future Enhancements
•	Add DB2 support
•	Validate data changes along with schema
•	Hash-based snapshot testing
•	Liquibase changelog parser for YAML-based releases
•	Integration with Jenkins/GitHub Actions

