Design Document: Custom Pytest-Based Database Release Testing Framework
1. Overview
This document describes the design of a Python-based automated testing framework intended to replace DBFit for validating PostgreSQL database schema changes across environments using Pytest. The framework supports forward SQL verification across environments and rollback SQL verification only in the sandbox environment. It generates HTML test reports and integrates with Jenkins using Maven.
2. Goals
- Replace DBFit with a maintainable, modular Python-based solution.
- Support validation of table definitions, columns, constraints, triggers, views, functions, and privileges.
- Enable rollback verification after applying forward SQL (only on sandbox).
- Generate and run test cases from custom SQL queries.
- Produce human-readable HTML test reports.
- Generate editable YAML snapshots from sandbox DB.
- Integrate test execution with Jenkins using Maven-compatible pom.xml.
3. Architecture
The framework uses YAML snapshots per table. Rollback testing is restricted to the sandbox environment. Jenkins can invoke tests via Maven using `pom.xml`.
Main components:
- generate_tests.py: creates snapshot and test files
- execute_tests.py: runs pytest and generates HTML report
- main.py: orchestrates full flow
- utils/: helper modules for DB access, comparison, and SQL execution
4. YAML Snapshot Format
Each table's snapshot is saved as a YAML file under expected/tables/. These are manually editable.
Example:
columns:
  - name: id
    type: integer
    nullable: false
    default: nextval('employee_id_seq')
  - name: first_name
    type: varchar
    nullable: false
primary_key:
  - id
triggers:
  - name: audit_employee_changes
    event: BEFORE INSERT OR UPDATE
    function: audit_func()
5. Folder Structure

dbtest_framework/
├── config/
│   └── envs.yaml
├── expected/
│   └── tables/
├── queries/
├── releases/
│   └── R1/
│       ├── forward.sql
│       └── rollback.sql
├── generated_tests/
├── utils/
│   ├── db.py
│   ├── compare.py
│   └── release_runner.py
├── generate_tests.py
├── execute_tests.py
├── main.py
├── pom.xml
├── README.md

6. Maven Integration
Maven exec plugin enables Jenkins to invoke Python scripts.
Example pom.xml snippet:

<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>exec-maven-plugin</artifactId>
  <version>3.1.0</version>
  <executions>
    <execution>
      <id>run-dbtests</id>
      <phase>test</phase>
      <goals><goal>exec</goal></goals>
      <configuration>
        <executable>python3</executable>
        <arguments>
          <argument>main.py</argument>
          <argument>${env.RELEASE}</argument>
        </arguments>
      </configuration>
    </execution>
  </executions>
</plugin>

7. Jenkins Usage
To run the framework for a given release:
export RELEASE=R1
mvn test
